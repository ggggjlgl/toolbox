import { Button, ComboBox, CheckBox, HorizontalBox, VerticalBox, ScrollView} from "std-widgets.slint";
import { RenameFilesPanel } from "rename_files_panel.slint";
import { FuncName, FuncInfo, RenameFilesRun } from "models.slint";



export global g {
    public pure function get_text(name: FuncName) -> string {
        if name == FuncName.RenameFiles {
            return "修改文件路径";
        } else if name == FuncName.ExtractFiles {
            return "提取文件";
        } else if name == FuncName.ExtractFiles {
            return "对比剪贴板";
        } else {
            return "推送安卓文件";
        }
    }
}

component Func inherits Rectangle {
    callback clicked;
    in property <FuncName> name;
    in-out property <bool> is_cur;
    border-width: 2px;
    border-color: is_cur ? green : gray;
    border-radius: 5px;
    Text {
        color: gray;
        text: g.get_text(name);
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}



export component MainWindow inherits Window {
    height: 400px;
    width: 600px;
    title: "工具箱";
    background: black;
    icon: @image-url("../images/tools.png");
    
    in-out property <[FuncInfo]> func_infos: [
        { name: FuncName.RenameFiles, is_cur: true },
        { name: FuncName.ExtractFiles, is_cur: false },
        { name: FuncName.CompareClipBoard, is_cur: false },
        { name: FuncName.PushFiles, is_cur: false },
    ];


    callback click_func(FuncName);
    callback select_path() -> string;
    callback run_rename_files(RenameFilesRun);
    glb := HorizontalBox {
        height: parent.height;
        width: parent.width;
        func_icons := VerticalLayout {
            height: parent.height - (self.y * 2);
            width: parent.width * (1 / 6);
            ScrollView {
                height: parent.height;
                width: parent.width;
                viewport-height: max(parent.height, 4 * 100px);
                for func[i] in func_infos: Func {
                    x: parent.x;
                    y: i * (parent.height / 4);
                    height: 82px;
                    width: 82px;
                    name: func.name;
                    is_cur: func.is_cur;
                    clicked => {
                        click_func(self.name);
                    }
                }
            }
        }

        detail := HorizontalLayout {
            height: parent.height;
            width: parent.width * (5 / 6);

            if func_infos[0].is_cur: RenameFilesPanel {
                height: parent.height;
                width: parent.width;
                name: func_infos[0].name;
                select_path => {
                    return root.select_path();
                }
                run(run_info) => {
                    root.run_rename_files(run_info)
                }
            }
            if func_infos[1].is_cur: VerticalBox {
                height: parent.height;
                width: parent.width;
                visible: func_infos[1].is_cur;
                in-out property <FuncName> name: func_infos[1].name;
                Text {
                    text: g.get_text(name);
                }
            }
            if func_infos[2].is_cur: VerticalBox {
                height: parent.height;
                width: parent.width;
                visible: func_infos[2].is_cur;
                in-out property <FuncName> name: func_infos[2].name;
                Text {
                    text: g.get_text(name);
                }
            }
            if func_infos[3].is_cur: VerticalBox {
                height: parent.height;
                width: parent.width;
                visible: func_infos[3].is_cur;
                in-out property <FuncName> name: func_infos[3].name;
                Text {
                    text: g.get_text(name);
                }
            }

    }
}

}
